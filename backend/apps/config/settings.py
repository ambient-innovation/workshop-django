"""
Django settings for workshop-django project.

Generated by 'django-admin startproject' using Django 3.1.

"""
import datetime
import os
import sys
from pathlib import Path

import environ
from celery.schedules import crontab
from corsheaders.defaults import default_methods
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
APPS_DIR = Path(__file__).resolve(strict=True).parent.parent
ROOT_DIR = APPS_DIR.parent

env = environ.Env(
    # django
    DJANGO_DEBUG=(bool, False),
    DJANGO_SECRET_KEY=(str, '5FrnlcdxysOeghqALIkCS/dmXk~KwTjGwhON6maDgYPOXuvjJY'),
    DJANGO_ADMINS=(list, []),
    DJANGO_ALLOWED_HOSTS=(list, ['127.0.0.1', 'localhost', '0.0.0.0']),
    DJANGO_STATIC_ROOT=(str, Path(ROOT_DIR.as_posix() + '/staticfiles').as_posix()),
    DJANGO_MEDIA_ROOT=(str, Path(ROOT_DIR.as_posix() + '/media').as_posix()),
    DJANGO_DATABASE_URL=(str, 'sqlite:///workshop-django.db'),
    DJANGO_EMAIL_URL=(environ.Env.email_url_config, 'consolemail://'),
    DJANGO_FRONTEND_URL=(str, ''),
    DJANGO_SERVER_URL=(str, ''),
    DJANGO_SESSION_COOKIE_SECURE=(bool, True),
    DJANGO_SECURE_HSTS_SECONDS=(int, 0),
    DJANGO_TEST_LOG_LEVEL=(str, 'WARN'),
    # Debugging
    DJANGO_USE_DEBUG_TOOLBAR=(bool, False),
    # Celery
    DJANGO_CELERY_BROKER_URL=(str, 'amqp://myuser:mypassword@rabbit:5672//'),
    DJANGO_CELERY_TASK_ALWAYS_EAGER=(bool, False),
    # Emailing
    DJANGO_DEFAULT_FROM_EMAIL=(str, 'Workshop django <noreply@ambient-innovation.com>'),
    # Sentry
    DJANGO_SENTRY_DSN=(str, ''),
    DJANGO_SENTRY_RELEASE=(str, 'local'),
    # AWS
    AWS_ACCESS_KEY_ID=(str, None),
    AWS_SECRET_ACCESS_KEY=(str, None),
    AWS_BUCKET_NAME=(str, None),
    AWS_SES=(str, False),
)

# Test testing flag
IS_TESTING = False
if 'test' in sys.argv or 'test_coverage' in sys.argv:
    # Set testing flag
    IS_TESTING = True
    # Test env vars for unittests
    base = environ.Path(__file__) - 1
    environ.Env.read_env(env_file=base('unittest.env'))

environ.Env.read_env()

ADMINS = tuple([tuple(admins.split(':')) for admins in env.list('DJANGO_ADMINS')])
MANAGERS = ADMINS
DEBUG = env.bool("DJANGO_DEBUG")
ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS')
SECRET_KEY = env.str('DJANGO_SECRET_KEY')
TEST_LOG_LEVEL = env.str('DJANGO_TEST_LOG_LEVEL')

# Application definition
DJANGO_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)

THIRD_PARTY_APPS = (
    'ai_django_core',
    'axes',
    'crispy_forms',
    'django_db_logger',
    'django_filters',
    'rest_framework',
    'ai_kit_auth',
    'corsheaders',
    'drf_yasg',
)

LOCAL_APPS = (
    'apps.account',
    'apps.cat',
    'apps.config',
    'apps.core',
)

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django_referrer_policy.middleware.ReferrerPolicyMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',

    # AxesMiddleware should be the last middleware in the MIDDLEWARE list.
    # It only formats user lockout messages and renders Axes lockout responses
    # on failed user authentication attempts from login views.
    # If you do not want Axes to override the authentication response
    # you can skip installing the middleware and use your own views.
    'axes.middleware.AxesMiddleware',
]

AUTHENTICATION_BACKENDS = [
    # AxesBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]

# Security envs
SESSION_COOKIE_SECURE = env.bool('DJANGO_SESSION_COOKIE_SECURE')
SECURE_HSTS_SECONDS = env.bool('DJANGO_SECURE_HSTS_SECONDS')
if SECURE_HSTS_SECONDS > 0:
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# Security middleware settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_SSL_REDIRECT = SESSION_COOKIE_SECURE
# Use X-Forwarded-Proto Header to determine SSL status (useful for API docs)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# XFrameOption middleware settings
X_FRAME_OPTIONS = 'DENY'

# Csrf middleware settings
CSRF_COOKIE_SECURE = SESSION_COOKIE_SECURE

# Referrer-Policy middleware
REFERRER_POLICY = 'same-origin'

# Set URLs and URL-Protocol for CORS and CSRF settings
FRONTEND_URL = env.str('DJANGO_FRONTEND_URL')
SERVER_URL = env.str('DJANGO_SERVER_URL')
URL_PROTOCOL = 'https://' if SESSION_COOKIE_SECURE else 'http://'

# CSP config
CSP_DEFAULT_SRC = (
    "'self'",
    "'unsafe-inline'",
    'localhost:8000',
    SERVER_URL,
)

# Cross-Origin Resource Sharing
CORS_ALLOW_CREDENTIALS = True
CORS_URLS_REGEX = '/api/.*'

CORS_ALLOW_METHODS = (
    default_methods
)

CORS_ALLOWED_ORIGINS = (
    f'{URL_PROTOCOL}{FRONTEND_URL}',
    f'{URL_PROTOCOL}localhost:3000',
    f'{URL_PROTOCOL}127.0.0.1:3000',
)

# Cross-site request forgery
CSRF_USE_SESSIONS = True
CSRF_TRUSTED_ORIGINS = [
    FRONTEND_URL,
    SERVER_URL,
    'localhost:3000',
    'localhost:8000',
    '127.0.0.1:3000',
    '127.0.0.1:8000',
]

# Routing
ROOT_URLCONF = 'apps.config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apps.config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# Database settings
DATABASE_PARAMS = env.db('DJANGO_DATABASE_URL')
DATABASES = {
    'default': DATABASE_PARAMS
}
if DATABASES['default']['ENGINE'] != 'django.db.backends.sqlite3':
    DATABASES['default']['OPTIONS'] = {'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"}

# Auth model
AUTH_USER_MODEL = 'account.EmailUser'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Axes config
LOGIN_TIMEDELTA = 15 * 60
AXES_FAILURE_LIMIT = 25
AXES_COOLOFF_TIME = datetime.timedelta(0, LOGIN_TIMEDELTA)
AXES_DISABLE_ACCESS_LOG = True
AXES_META_PRECEDENCE_ORDER = (  # Copied from django-ipware as that is apparently not set by default
    'HTTP_X_FORWARDED_FOR', 'X_FORWARDED_FOR',  # <client>, <proxy1>, <proxy2>
    'HTTP_CLIENT_IP',
    'HTTP_X_REAL_IP',
    'HTTP_X_FORWARDED',
    'HTTP_X_CLUSTER_CLIENT_IP',
    'HTTP_FORWARDED_FOR',
    'HTTP_FORWARDED',
    'HTTP_VIA',
    'REMOTE_ADDR',
)
# Block by Username only (i.e.: Same user different IP is still blocked, but different user same IP is not)
AXES_ONLY_USER_FAILURES = True

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/
LANGUAGE_CODE = 'de-AT'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
    'axes_cache': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_ROOT = env('DJANGO_STATIC_ROOT')
STATIC_URL = '/static/'
STATICFILES_STORAGE = 'apps.core.manifests.WhiteNoiseStaticFilesStorage'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    Path(ROOT_DIR.as_posix() + '/static').as_posix(),
)

# AWS credentials
if env('AWS_ACCESS_KEY_ID') and env('AWS_SECRET_ACCESS_KEY'):
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')

AWS_PUBLIC_MEDIA_LOCATION = ''
AWS_PRIVATE_MEDIA_LOCATION = ''
# We store media files in S3 if available
if env('AWS_BUCKET_NAME'):
    AWS_STORAGE_BUCKET_NAME = env('AWS_BUCKET_NAME')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }

    AWS_S3_REGION_NAME = 'eu-central-1'
    AWS_S3_SIGNATURE_VERSION = 's3v4'

    # If set to None then all files will inherit the bucketâ€™s ACL
    AWS_DEFAULT_ACL = None

    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'
    DEFAULT_FILE_STORAGE = 'apps.core.storage_backends.PublicMediaStorage'

    AWS_PUBLIC_MEDIA_LOCATION = 'media/public'
    AWS_PRIVATE_MEDIA_LOCATION = 'media/private'

    THUMBNAIL_STORAGE = 'apps.core.storage_backends.PrivateMediaStorage'

else:
    MEDIA_URL = '/media/'

MEDIA_ROOT = env('DJANGO_MEDIA_ROOT')

# SES AWS Emails
if env.bool('AWS_SES'):
    EMAIL_BACKEND = 'django_ses.SESBackend'
    AWS_SES_REGION_NAME = 'eu-central-1'
    AWS_SES_REGION_ENDPOINT = 'email.eu-central-1.amazonaws.com'
else:
    vars().update(env.email_url('DJANGO_EMAIL_URL'))

DEFAULT_FROM_EMAIL = env.str('DJANGO_DEFAULT_FROM_EMAIL')

# Sorl Thumbnail
THUMBNAIL_ENGINE = 'sorl.thumbnail.engines.wand_engine.Engine'
THUMBNAIL_FORMAT = 'PNG'

# REST
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
    ),
}

# API Auth
AI_KIT_AUTH = {
    "FRONTEND": {
        "URL": f'{URL_PROTOCOL}{FRONTEND_URL}',
        "RESET_PW_ROUTE": "/reset-password/",
    },
    "ENABLE_ENDPOINTS": {
        "REGISTER": False,
    },
    "USE_AI_KIT_AUTH_ADMIN": False,
    "EMAIL_TEMPLATES": {
        "CUSTOM_DATA_FUNCTION": "apps.email.ai_kit.custom_email_data",
        "RESET_PASSWORD": {
            "TITLE": 'auth/reset_passwort_title.txt',
            "BODY_PLAINTEXT": "auth/reset_password_body.txt",
            "BODY_HTML": "auth/reset_password_body.html",
        },
    },
    "USER_SERIALIZER": "apps.account.api.serializers.EmailUserAuthSerializer",
}

# Celery
CELERY_RETRY_DELAY = 60 * 8  # 8 Hours
CELERY_RETRY_MAX_TIMES = 15  # 15 retries
CELERY_BROKER_URL = env('DJANGO_CELERY_BROKER_URL')  # Url to the broker server, required to run cronjobs
CELERY_TASK_ALWAYS_EAGER = env.bool('DJANGO_CELERY_TASK_ALWAYS_EAGER') if not IS_TESTING else True

CELERY_BEAT_SCHEDULE = {
    'clear sessions': {
        'task': 'apps.core.tasks.clear_sessions',
        'schedule': crontab(hour=3, minute=40, day_of_week=1),
    },
    'remove old system logs': {
        'task': 'apps.core.tasks.remove_old_system_logs',
        'schedule': crontab(hour=3, minute=45, day_of_week=1),
    },
}

# Logging
DB_LOGGER_ENTRY_LIFETIME = 30
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'db_handler': {
            'level': 'DEBUG',
            'class': 'django_db_logger.db_log_handler.DatabaseLogHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'system': {
            'level': 'DEBUG' if not IS_TESTING else TEST_LOG_LEVEL,
            'handlers': ['console', 'db_handler'],
            'propagate': True,
        },
        'async': {
            'level': 'DEBUG' if not IS_TESTING else TEST_LOG_LEVEL,
            'handlers': ['console', 'db_handler'],
            'propagate': True,
        },
    }
}

# django Admin
ADMIN_SITE_HEADER = _('Workshop django - Administration')

# Sentry logging
SENTRY_ENVIRONMENT = env('DJANGO_SENTRY_RELEASE')
if os.environ.get('DJANGO_SENTRY_DSN'):
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        env('DJANGO_SENTRY_DSN'),
        integrations=[DjangoIntegration()],
        max_breadcrumbs=50,
        debug=DEBUG,
        environment=SENTRY_ENVIRONMENT,
        server_name=FRONTEND_URL
    )

# Debug toolbar
USE_DEBUG_TOOLBAR = env.bool('DJANGO_USE_DEBUG_TOOLBAR')
if USE_DEBUG_TOOLBAR:
    MIDDLEWARE += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )
    INSTALLED_APPS += (
        'debug_toolbar',
    )
    DEBUG_TOOLBAR_CONFIG = {
        'DISABLE_PANELS': [
            'debug_toolbar.panels.redirects.RedirectsPanel',
        ],
        'SHOW_TEMPLATE_CONTEXT': True,
        'SHOW_TOOLBAR_CALLBACK': lambda request: True,
    }

    DEBUG_TOOLBAR_PATCH_SETTINGS = False

    # http://django-debug-toolbar.readthedocs.org/en/latest/installation.html
    INTERNAL_IPS = ('127.0.0.1', '0.0.0.0', '10.0.2.2')
